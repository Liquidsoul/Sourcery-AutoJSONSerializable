// swiftlint:disable file_length
// swiftlint:disable line_length

import Foundation

// MARK: - AutoJSONDeserializable for classes, protocols, structs
{% for type in types.implementing.AutoJSONDeserializable %}

// MARK: - {{ type.name }} AutoJSONDeserializable
extension {{ type.name }}: JSONDeserializable {
{% if type.supertype.implements.AutoJSONDeserializable %} THIS WONT COMPILE, WE DONT SUPPORT INHERITANCE for AutoJSONDeserializable {% endif %}
    {{ type.accessLevel }} init?(JSONObject: [String: Any]) {
        {% macro Optional arg %}guard {{ arg }} else { return nil }{% endmacro %}
        {% for variable in type.storedVariables %}
        {% ifnot variable.isArray %}
        {% set castType %}{% if variable.type.implements.AutoJSONDeserializable or variable.type.implements.JSONDeserializable %}[String: Any]{% else %}{% if variable.actualTypeName.unwrappedTypeName == "Date" %}String{% else %}{{ variable.unwrappedTypeName }}{% endif %}{% endif %}{% endset %}
        {% set itemOperation %}{% if variable.type.implements.AutoJSONDeserializable or variable.type.implements.JSONDeserializable %}.flatMap({{ variable.unwrappedTypeName }}.init(JSONObject:)){%else%}{% if variable.actualTypeName.unwrappedTypeName == "Date" %}.flatMap(JSONDateFormatter.date(from:)){% endif %}{% endif %}{% endset %}
        {% set Assignment %}let {{ variable.name }} = (JSONObject["{{ variable.annotations.JSONKey|default:variable.name }}"] as? {{ castType }}){{ itemOperation }}{% endset %}
        {% if variable.isOptional %}
        {{ Assignment }}
        {% else %}
        {% call Optional Assignment %}
        {% endif %}
        {% else %}
        {% set castType %}{% if variable.typeName.array.elementType.implements.AutoJSONDeserializable or variable.typeName.array.elementType.implements.JSONDeserializable %}[[String: Any]]{% else %}{% if variable.typeName.array.elementTypeName.unwrappedTypeName == "Date" %}[String]{% else %}{{ variable.typeName }}{% endif %}{% endif %}{% endset %}
        {% set itemOperation %}{% if variable.typeName.array.elementType.implements.AutoJSONDeserializable or variable.typeName.array.elementType.implements.JSONDeserializable %}?.flatMap({{ variable.typeName.array.elementTypeName.unwrappedTypeName }}.init(JSONObject:)){%else%}{% if variable.typeName.array.elementTypeName.unwrappedTypeName == "Date" %}?.flatMap(JSONDateFormatter.date(from:)){% endif %}{% endif %}{% endset %}
        {% set Assignment %}let {{ variable.name }} = (JSONObject["{{ variable.annotations.JSONKey|default:variable.name }}"] as? {{ castType }}){{ itemOperation }}{% endset %}
        {% if variable.isOptional %}
        {{ Assignment }}
        {% else %}
        {% call Optional Assignment %}
        {% endif %}
        {% endif %}
        self.{{ variable.name }} = {{ variable.name }}
        {% endfor %}
    }
}
{% endfor %}

// MARK: -
