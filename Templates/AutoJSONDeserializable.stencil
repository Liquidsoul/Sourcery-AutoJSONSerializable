// swiftlint:disable file_length

// MARK: - AutoJSONDeserializable for classes, protocols, structs
{% for type in types.implementing.AutoJSONDeserializable %}

// MARK: - {{ type.name }} AutoJSONDeserializable
extension {{ type.name }}: JSONDeserializable {
{% if type.supertype.implements.AutoJSONDeserializable %} THIS WONT COMPILE, WE DONT SUPPORT INHERITANCE for AutoJSONDeserializable {% endif %}
    {{ type.accessLevel }} init?(JSONObject: [String: Any]) {
        {% for variable in type.storedVariables %}
        {% if variable.type.implements.AutoJSONDeserializable %}
          {% if variable.isOptional %}
            {% if variable.annotations.keyName %}
        let {{ variable.name }} = (JSONObject["{{ variable.annotations.keyName }}"] as? [String: Any]).flatMap({{ variable.unwrappedTypeName }}.init(JSONObject:))
            {% else %}
        let {{ variable.name }} = (JSONObject["{{ variable.name }}"] as? [String: Any]).flatMap({{ variable.unwrappedTypeName }}.init(JSONObject:))
            {% endif %}
          {% else %}
            {% if variable.annotations.keyName %}
        guard let {{ variable.name }} = (JSONObject["{{ variable.annotations.keyName }}"] as? [String: Any]).flatMap({{ variable.unwrappedTypeName }}.init(JSONObject:)) else { return nil }
            {% else %}
        guard let {{ variable.name }} = (JSONObject["{{ variable.name }}"] as? [String: Any]).flatMap({{ variable.unwrappedTypeName }}.init(JSONObject:)) else { return nil }
            {% endif %}
          {% endif %}
        {% else %}
          {% if variable.isOptional %}
            {% if variable.annotations.keyName %}
        let {{ variable.name }} = JSONObject["{{ variable.annotations.keyName }}"] as? {{ variable.unwrappedTypeName }}
            {% else %}
        let {{ variable.name }} = JSONObject["{{ variable.name }}"] as? {{ variable.unwrappedTypeName }}
            {% endif %}
          {% else %}
            {% if variable.annotations.keyName %}
        guard let {{ variable.name }} = JSONObject["{{ variable.annotations.keyName }}"] as? {{ variable.typeName }} else { return nil }
            {% else %}
        guard let {{ variable.name }} = JSONObject["{{ variable.name }}"] as? {{ variable.typeName }} else { return nil }
            {% endif %}
          {% endif %}
        {% endif %}
        self.{{ variable.name }} = {{ variable.name }}
        {% endfor %}
    }
}
{% endfor %}

// MARK: -
