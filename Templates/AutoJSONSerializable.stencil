// swiftlint:disable cyclomatic_complexity file_length function_body_length line_length

import Foundation

enum JSONDateFormatter {
    static func date(from string: String) -> Date? {
        if #available(iOS 10.0, macOS 10.12, *) {
            // [HACK] workaround for unsupported milliseconds part in ISO8601DateFormatter.
            // "1985-04-12T23:20:50Z" is supported where "1985-04-12T23:20:50.678Z" is not.
            // So this removes the ".678" part.
            let dateString = string.replacingOccurrences(of: "\\.\\d+", with: "", options: .regularExpression)
            // [/HACK]
            return isoDateFormatter.date(from: dateString)
        } else {
            return dateFormatter.date(from: string)
        }
    }

    static func string(from date: Date) -> String {
        if #available(iOS 10.0, macOS 10.12, *) {
            return isoDateFormatter.string(from: date)
        } else {
            return dateFormatter.string(from: date)
        }
    }

    @available(iOS 10.0, macOS 10.12, *)
    private static let isoDateFormatter: ISO8601DateFormatter = {
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = .withInternetDateTime
        return formatter
    }()

    private static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "en_US_POSIX")
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
        return formatter
    }()
}

extension Date {
    func iso8601String() -> String {
        return JSONDateFormatter.string(from: self)
    }
}

// MARK: - AutoJSONSerializable for classes, protocols, structs
{% for type in types.implementing.AutoJSONSerializable %}

// MARK: - {{ type.name }} AutoJSONSerializable
extension {{ type.name }}: JSONSerializable {
{% if type.supertype.implements.AutoJSONSerializable %} THIS WONT COMPILE, WE DONT SUPPORT INHERITANCE for AutoJSONSerializable {% endif %}
    {{ type.accessLevel }} func toJSONObject() -> Any {
        var jsonObject = [String: Any]()
        {% for variable in type.storedVariables %}
        {% ifnot variable.isArray %}
        {% set optionalTrait %}{% if variable.isOptional %}?{%endif%}{% endset %}
        let {{ variable.name }} = self.{{ variable.name }}{% if variable.type.implements.AutoJSONSerializable or variable.type.implements.JSONSerializable %}{{ optionalTrait }}.toJSONObject(){% else %}{%if variable.actualTypeName.unwrappedTypeName == "Date" %}{{ optionalTrait }}.iso8601String(){% else %}{% if variable.type.kind == "enum" and variable.type.rawTypeName %}{{ optionalTrait }}.rawValue{% endif %}{%endif%}{% endif %}
        {% else %}
        {% set optionalTrait %}{% if variable.typeName.array.elementTypeName.isOptional %}?{%endif%}{% endset %}
        let {{ variable.name }} = self.{{ variable.name }}.map { $0{% if variable.typeName.array.elementType.implements.AutoJSONSerializable or variable.typeName.array.elementType.implements.JSONSerializable %}.toJSONObject(){% else %}{%if variable.typeName.array.elementTypeName.unwrappedTypeName == "Date" %}{{ optionalTrait }}.iso8601String(){% else %}{% if variable.typeName.array.elementType.kind == "enum" and variable.typeName.array.elementType.rawTypeName %}{{ optionalTrait }}.rawValue{% endif %}{%endif%}{% endif %} }
        {% endif %}
        jsonObject["{{ variable.annotations.JSONKey|default:variable.name }}"] = {{ variable.name }}
        {% endfor %}
        return jsonObject
    }
}
{% endfor %}

// MARK: -
