// swiftlint:disable cyclomatic_complexity file_length function_body_length line_length

import Foundation

enum JSONDateFormatter {
    static func date(from string: String) -> Date? {
        if #available(iOS 10.0, macOS 10.12, *) {
            return isoDateFormatter.date(from: string)
        } else {
            return dateFormatter.date(from: string)
        }
    }

    static func string(from date: Date) -> String {
        if #available(iOS 10.0, macOS 10.12, *) {
            return isoDateFormatter.string(from: date)
        } else {
            return dateFormatter.string(from: date)
        }
    }

    @available(iOS 10.0, macOS 10.12, *)
    private static let isoDateFormatter: ISO8601DateFormatter = {
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = .withInternetDateTime
        return formatter
    }()

    private static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "en_US_POSIX")
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
        return formatter
    }()
}

extension Date {
    func iso8601String() -> String {
        return JSONDateFormatter.string(from: self)
    }
}

// MARK: - AutoJSONSerializable for classes, protocols, structs

<%
func assignment(variableName: String, isArray: Bool, conversion: String) -> String {
    let mapping = isArray ? ".map { $0\(conversion) }" : conversion
    return "let \(variableName) = self.\(variableName)\(mapping)"
}

func conversion(type: Type?, typeName: TypeName) -> String {
    var conversion = ""
    if type?.implements["AutoJSONSerializable"] != nil || type?.implements["JSONSerializable"] != nil {
        conversion = ".toJSONObject()"
    } else if (typeName.actualTypeName ?? typeName).unwrappedTypeName == "Date" {
        conversion = ".iso8601String()"
    }
    if !conversion.isEmpty, typeName.isOptional {
        conversion = "?" + conversion
    }
    return conversion
}
  -%>
<% for type in types.all {
    guard type.implements["AutoJSONSerializable"] != nil else { continue }
    -%>
// MARK: - <%= type.name %> AutoJSONSerializable
extension <%= type.name %>: JSONSerializable {
    <%= type.accessLevel %> func toJSONObject() -> [String: Any] {
        var jsonObject = [String: Any]()
        <%_ for variable in type.storedVariables {
            let variableName = variable.name
            let type: Type?
            let typeName: TypeName
            if variable.isArray {
                type = variable.typeName.array!.elementType
                typeName = variable.typeName.array!.elementTypeName
            } else {
                type = variable.type
                typeName = variable.typeName
            }
          -%>
        <%= assignment(variableName: variable.name, isArray: variable.isArray, conversion: conversion(type: type, typeName: typeName)) %>
        <%_ let jsonKey = variable.annotations["JSONKey"] as? String ?? variableName -%>
        jsonObject["<%= jsonKey %>"] = <%= variableName %>
        <%_}-%>
        return jsonObject
    }
}

<%_}-%>
